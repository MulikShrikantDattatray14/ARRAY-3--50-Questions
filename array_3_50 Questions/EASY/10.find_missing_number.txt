// Example 1:
// Input Format: N = 5, array[] = {1,2,4,5}
// Result: 3
// Explanation: In the given array, number 3 is missing. So, 3 is the answer.

// 1.Naive Approach(Brute-force approach):-
// Intuition: For each number between 1 to N, we will try to find it in the given array using linear search. And if we donâ€™t find any of them, we will return the number.

function missingNumber(a, N) {
  // Outer loop that runs from 1 to N:
  for (let i = 1; i <= N; i++) {
    // flag variable to check if an element exists
    let flag = 0;
    // Search the element using linear search:
    for (let j = 0; j < N - 1; j++) {
      if (a[j] === i) {
        // i is present in the array and thus break and start finding the next number
        flag = 1;
        break;
      }
    }
    //check if the element is missing (i.e., flag === 0):
    if (flag === 0) {
      return i;
    }
  }

  // The following line will never execute.
  // It is just to avoid warnings.
  return -1;
}
function main() {
  const N = 5;
  const a = [1, 2, 4, 5];
  const ans = missingNumber(a, N);
  console.log("The missing number is:", ans);
}

main();

// Complexity Analysis:-

// Time Complexity: O(N2), where N = size of the array+1.
// Reason: In the worst case i.e. if the missing number is N itself, the outer loop will run for N times, and for every single number the inner loop will also run for approximately N times. So, the total time complexity will be O(N2).

// Space Complexity: O(1)  as we are not using any extra space.
////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Optimal Approach-1 - Summation Approach:-
function missingNumber(a, N) {
  // Summation of first N numbers:
  const summation = (N * (N + 1)) / 2;

  // Summation of all array elements:
  let s2 = 0;
  for (let i = 0; i < N - 1; i++) {
    s2 += a[i];
  }

  const missingNum = summation - s2;
  return missingNum;
}

function main() {
  const N = 5;
  const a = [1, 2, 4, 5];
  const ans = missingNumber(a, N);
  console.log("The missing number is:", ans);
}

main();

//   Complexity Analysis :
// Time Complexity: O(N), where N = size of array+1.
// Reason: Here, we need only 1 loop to get the sum of the array elements. The loop runs for approx. N times. So, the time complexity is O(N).

// Space Complexity: O(1) as we are not using any extra space.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Optimal Approach 2-XOR Approach:

function missingNumber(a, N) {
  let xor1 = 0;
  let xor2 = 0;
  for (let i = 0; i < N - 1; i++) {
    xor2 = xor2 ^ a[i]; // XOR of array elements
    xor1 = xor1 ^ (i + 1); // XOR up to [1...N-1]
  }
  xor1 = xor1 ^ N; // XOR up to [1...N]
  return xor1 ^ xor2; // the missing number
}

function main() {
  const N = 5;
  const a = [1, 2, 4, 5];
  const ans = missingNumber(a, N);
  console.log("The missing number is:", ans);
}

main();

console.log("======================================")
console.log(1^2^3^4^5);
console.log(1^2^4^5);