//Longest Subarray with sum K | [Postives and Negatives]
// Problem Statement: Given an array and a sum k, we need to print the length of the longest subarray that sums to k.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Solution 1-Naive Approach (Brute-force approach):
// Here, in this approach, we are going to generate all possible subarrays to solve this problem.

// function getLongestSubarray(a, k) {
//   let n = a.length; // size of the array

//   let len = 0;
//   for (let i = 0; i < n; i++) { // starting index
//       for (let j = i; j < n; j++) { // ending index
//           // add all the elements of subarray = a[i...j]
//           let s = 0;
//           for (let K = i; K <= j; K++) {
//               s += a[K];
//           }

//           if (s === k)
//               len = Math.max(len, j - i + 1);
//       }
//   }
//   return len;
// }

// let a = [-1, 1, 1];
// let k = 1;
// let len = getLongestSubarray(a, k);
// console.log("The length of the longest subarray is:", len);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////

//optimal solution -1 (using hashmap)

//https://www.youtube.com/watch?v=XzwUBIkR9pA

function getLongestSubarray(a, k) {
    let n = a.length; // size of the array
    let preSumMap = new Map();
    let sum = 0;
    let maxLen = 0;
    for (let i = 0; i < n; i++) {
        // calculate the prefix sum till index i
        sum += a[i];
        // if the sum = k, update the maxLen
        if (sum === k) {
            maxLen = Math.max(maxLen, i + 1);
            console.log([0, i]);
        }
        // calculate the sum of remaining part i.e. x-k
        let rem = sum - k;
        // calculate the length and update maxLen
        if (preSumMap.has(rem)) {
            let start = preSumMap.get(rem);
            let len = i - start;
            console.log([start + 1, i]);
            maxLen = Math.max(maxLen, len);
        }
        // finally, update the map checking the conditions
        if (!preSumMap.has(sum)) {
            preSumMap.set(sum, i);
        }
    }

    return maxLen;
}

let a = [-1, 1, 1];
let k = 2;
let len = getLongestSubarray(a, k);
console.log("The length of the longest subarray is:", len);