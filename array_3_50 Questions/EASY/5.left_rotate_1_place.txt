//Solution 1: Brute force Approach:

// function solve(arr, n) {
//   let temp = new Array(n);
//   for (let i = 1; i < n; i++) {
//     temp[i - 1] = arr[i];
//   }
//   temp[n - 1] = arr[0];
//   console.log(temp);
// }

// let n = 5;
// let arr = [1, 2, 3, 4, 5]; //[2,3,4,5,1]
// solve(arr, n);

// Complexity Analysis :
// Time Complexity: O(n), as we iterate through the array only once.
// Space Complexity: O(n) as we are using another array of size, same as the given array.


//////////////////////////////////////////////////////////////////////////////////////

//Optimal Approach : 

function solve(arr, n) {
    let temp = arr[0]; // storing the first element of the array in a variable
    for (let i = 0; i < n - 1; i++) {
      arr[i] = arr[i + 1];
    }
    arr[n - 1] = temp; // assign the value of the variable at the last index
    return (arr)
  }
  let n = 5;
  let arr = [1, 2, 3, 4, 5];
  let ans=solve(arr, n);
  console.log(ans)
//   Complexity Analysis
//   Time Complexity: O(n), as we iterate through the array only once.
  
//   Space Complexity: O(1) as no extra space is used  