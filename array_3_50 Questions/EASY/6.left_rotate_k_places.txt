// brute force: run the below function k times
function solve(arr, n) {
  let temp = arr[0]; // storing the first element of the array in a variable
  for (let i = 0; i < n - 1; i++) {
    arr[i] = arr[i + 1];
  }
  arr[n - 1] = temp; // assign the value of the variable at the last index
  console.log(arr);
}

let n = 5;

let arr = [1, 2, 3, 4, 5];
let k = 2;
for (let i = 0; i < k; i++) {
  solve(arr, n);
}

// In summary:
// Time Complexity: O(kn)
// Space Complexity: O(1)

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//optimised approach :


function reverse(arr, start, end) {
  while (start <= end) {
      let temp = arr[start];
      arr[start] = arr[end];
      arr[end] = temp;
      start++;
      end--;
  }
}
function rotateElementsToLeft(arr, n, k) {
  // Reverse first k elements
  reverse(arr, 0, k - 1);
  // Reverse last n-k elements
  reverse(arr, k, n - 1);
  // Reverse whole array
  reverse(arr, 0, n - 1);
}
function main() {
  let arr = [1, 2, 3, 4, 5, 6, 7];
  let n = 7;
  let k = 2;
  rotateElementsToLeft(arr, n, k);
  console.log("After Rotating the k elements to left " + arr.join(" "));
}

main();

//In summary, the time complexity is O(n), and the space complexity is O(1).



================================================================================================================


Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.

 

Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
 

Constraints:

1 <= nums.length <= 105
-231 <= nums[i] <= 231 - 1
0 <= k <= 105
 

Follow up:

Try to come up with as many solutions as you can. There are at least three different ways to solve this problem.
Could you do it in-place with O(1) extra space?

========================================================================================================

/**
 * @param {number[]} nums
 * @param {number} k
 * @return {void} Do not return anything, modify nums in-place instead.
 */
var rotate = function (nums, k) {
    k = k % nums.length
    if (nums.length == 1) return nums
    function reverse(arr, start, end) {
        while (start <= end) {
            let temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            start++;
            end--;
        }
    }
    function rotateElementsToLeft(arr, n, k) {
        // Reverse whole array
        reverse(arr, 0, n - 1);
        // Reverse first k elements
        reverse(arr, 0, k - 1);
        // Reverse last n-k elements
        reverse(arr, k, n - 1);

    }

    let arr = nums
    let n = nums.length
    return rotateElementsToLeft(arr, n, k);

};