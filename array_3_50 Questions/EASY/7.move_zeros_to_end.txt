//your task is to move all the zeros in the array to the end of the array and move non-negative integers to the front by maintaining their order.

//Brute Force Approach:

// function moveZeros(n, a) {
//   // Temporary array
//   let temp = [];

//   // Copy non-zero elements from original array to temp array, thus order of non-zero elements will be maintained.
//   for (let i = 0; i < n; i++) {
//     if (a[i] !== 0) {
//       temp.push(a[i]);
//     }
//   }

//   // Number of non-zero elements
//   let nz = temp.length;

//   // Copy elements from temp and fill the first nz fields of the original array
//   for (let i = 0; i < nz; i++) {
//     a[i] = temp[i];
//   }

//   // Fill the rest of the cells with 0
//   for (let i = nz; i < n; i++) {
//     a[i] = 0;
//   }

//   return a;
// }

// let arr = [1, 0, 2, 3, 2, 0, 0, 4, 5, 1];
// let n = 10;
// let ans = moveZeros(n, arr);
// console.log(ans.join(" "));

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//optimised solution : Optimal Approach(Using 2 pointers)

//see the striver video explained :


//see the striver video explained :
function moveZeros(n, a) {
  //j always points to zero
  let j = -1;
  // Place the pointer j
  for (let i = 0; i < n; i++) {// this for loop gives us the index where 1st time we encounter zero.
      if (a[i] === 0) {
          j = i;
          break;
      }
  }
  // No non-zero elements
  // if no zeros are present
  if (j === -1) return a;

  // Move the pointers i and j and swap accordingly
  for (let i = j + 1; i < n; i++) {
      if (a[i] !== 0) {
          [a[i], a[j]] = [a[j], a[i]];
          j++;
      }
  }

  return a;
}

let arr = [1, 0, 2, 3, 2, 0, 0, 4, 5, 1];
let n = 10;
let ans = moveZeros(n, arr);
console.log(ans.join(" "));
