//Given two sorted arrays, arr1, and arr2 of size n and m. Find the union of two sorted arrays
//The union of two arrays can be defined as the common and distinct elements in the two arrays.NOTE: Elements in the union should be in ascending order.

//Solution 1: Using Map
// Our aim is to find the common elements in arr1 and arr2, and the distinct elements of arr1,arr2. Use a Single map to find the frequencies of elements in arr1 and arr2.



function findUnion(arr1, arr2) {
  let freq = new Map();
  let union = [];

  for (let num of arr1) {
      if (freq.has(num)) {
          freq.set(num, freq.get(num) + 1);
      } else {
          freq.set(num, 1);
      }
  }

  for (let num of arr2) {
      if (freq.has(num)) {
          freq.set(num, freq.get(num) + 1);
      } else {
          freq.set(num, 1);
      }
  }

  for (let [num, count] of freq) {
      union.push(num);
  }

  return union;
}

let arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
let arr2 = [2, 3, 4, 4, 5, 11, 12];

let union = findUnion(arr1, arr2);

console.log("Union of arr1 and arr2 is:");
console.log(union.join(" "));
// Complexity Analysis
// Time Compleixty : O( (m+n)log(m+n) ) . Inserting a key in map takes logN times, where N is no of elements in map. At max map can store m+n elements {when there are no common elements and elements in arr,arr2 are distntict}. So Inserting m+n th element takes log(m+n) time. Upon approximation across insertion of all elements in worst it would take O((m+n)log(m+n) time.

// Using HashMap also takes the same time, On average insertion in unordered_map takes O(1) time but sorting the union vector takes O((m+n)log(m+n))  time. Because at max union vector can have m+n elements.

// Space Complexity : O(m+n) {If Space of Union ArrayList is considered}

///////////////////////////////////////////////////////////////////////////////////

//Solution 2: Using Set:-
// function findUnion(arr1, arr2) {
//     const set = new Set();
//     const union = [];

//     for (let num of arr1) {
//       set.add(num);
//     }

//     for (let num of arr2) {
//       set.add(num);
//     }
//     for (let num of set) {
//       union.push(num);
//     }

//     return union;
//   }

//   const arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
//   const arr2 = [2, 3, 4, 4, 5, 11, 12];

//   const union = findUnion(arr1, arr2);

//   console.log("Union of arr1 and arr2 is:");
//   console.log(...union);

///////////////////////////////////////////////////////////////////////////////////////////////////////////
//Solution 3: Two Pointers :


function findUnion(arr1, arr2) {
    let i = 0,
        j = 0; // Pointers
    let union = []; // Union array
    while (i < arr1.length && j < arr2.length) {
        if (arr1[i] <= arr2[j]) {
            // Case 1 and 2
            if (union.length === 0 || union[union.length - 1] !== arr1[i])
                union.push(arr1[i]);
            i++;
        } else {
            // Case 3
            if (union.length === 0 || union[union.length - 1] !== arr2[j])
                union.push(arr2[j]);
            j++;
        }
    }
    while (i < arr1.length) {
        // If any elements left in arr1
        if (union[union.length - 1] !== arr1[i]) union.push(arr1[i]);
        i++;
    }
    while (j < arr2.length) {
        // If any elements left in arr2
        if (union[union.length - 1] !== arr2[j]) union.push(arr2[j]);
        j++;
    }
    return union;
}

const arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
const arr2 = [2, 3, 4, 4, 5, 11, 12];

const union = findUnion(arr1, arr2);

console.log("Union of arr1 and arr2 is:");
console.log(union.join(" "));

//   Complexity Analysis
//   Time Complexity: O(m+n), Because at max i runs for n times and j runs for m times. When there are no common elements in arr1 and arr2 and all elements in arr1, arr2 are distinct.

//   Space Complexity : O(m+n) {If Space of Union ArrayList is considered}

//   O(1) {If Space of union ArrayList is not considered}
