Find the repeating and missing numbers :-

Problem Statement:

You are given a read-only array of N integers with values also in the range [1, N] both inclusive. Each integer appears exactly once except A which appears twice and B which is missing. The task is to find the repeating and missing numbers A and B where A repeats twice and B is missing.

============================================================================================================

Brute  Approach : (Using Hashing): 

Intuition:
Instead of counting the occurrences every time, using the hashing technique, we will store the frequency of each element between 1 to N. Now, the element with frequency 2 will be the repeating number and the element with frequency 0 will be the missing number.

Note: Here, we can solve this problem using a hash array.

CODE : 

function findMissingRepeatingNumbers(a) {
  const n = a.length;
  const hash = new Array(n + 1).fill(0);

  for (let i = 0; i < n; i++) {
    hash[a[i]]++;
  }

  let repeating = -1,
    missing = -1;
  for (let i = 1; i <= n; i++) {
    if (hash[i] == 2) repeating = i;
    else if (hash[i] == 0) missing = i;

    if (repeating != -1 && missing != -1) break;
  }
  console.log(hash)

  console.log([repeating, missing]);
}

const a = [3, 1, 2, 5, 4, 6, 7, 5];
findMissingRepeatingNumbers(a);


Complexity Analysis :
Time Complexity: O(2N), where N = the size of the given array.
Reason: We are using two loops each running for N times. So, the time complexity will be O(2N).

Space Complexity: O(N) as we are using a hash array to solve this problem.

////////////////////////////////////////////////////////////////////////////////////////////////


Optimal Approach 1:
Algorithm / Intuition
Optimal Approach 1 (Using Maths): 
Intuition:
The idea is to convert the given problem into mathematical equations. Since we have two variables i.e. missing and repeating, we will try to form two linear equations. And then we will find the values of two variables using those equations.

Complexity Analysis : 
Time Complexity: O(N), where N = the size of the given array.
Reason: We are using only one loop running for N times. So, the time complexity will be O(N).

Space Complexity: O(1) as we are not using any extra space to solve this problem.



function findMissingRepeatingNumbers(a) {
  const n = a.length; // size of the array
  // Find Sn and S2n:
  const SN = (n * (n + 1)) / 2;// calculates the sum of the first n natural numbers
  const S2N = (n * (n + 1) * (2 * n + 1)) / 6;// calculates the sum of the squares of the first n natural numbers.

  // Calculate S and S2:
  let S = 0,
    S2 = 0;
  for (let i = 0; i < n; i++) {
    S += a[i];
    S2 += a[i] * a[i];
  }

  //S-Sn = X-Y:
  const val1 = S - SN;

  // S2-S2n = X^2-Y^2:
  let val2 = S2 - S2N;

  //Find X+Y = (X^2-Y^2)/(X-Y):
  val2 = val2 / val1;

  //Find X and Y: X = ((X+Y)+(X-Y))/2 and Y = X-(X-Y),
  // Here, X-Y = val1 and X+Y = val2:
  const x = (val1 + val2) / 2;
  const y = x - val1;

  console.log([x, y]);
}

const a = [3, 1, 2, 5, 4, 6, 7, 5];
findMissingRepeatingNumbers(a);

