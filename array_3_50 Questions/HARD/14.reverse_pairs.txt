Given an integer array nums, return the number of reverse pairs in the array.

A reverse pair is a pair (i, j) where:

0 <= i < j < nums.length and
nums[i] > 2 * nums[j].
 

Example 1:

Input: nums = [1,3,2,3,1]
Output: 2
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1
Example 2:

Input: nums = [2,4,3,5,1]
Output: 3
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1
(2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1
 

Constraints:

1 <= nums.length <= 5 * 104
-231 <= nums[i] <= 231 - 1


================================================================================================================

/**
 * @param {number[]} nums
 * @return {number}
 */
var reversePairs = function(nums) {
     const result = solve(nums);
        return (result);

        function solve(A) {
            return mergeSort(A, 0, A.length - 1);
        }
        // t.c - nlogn
        // sc - n 
        function mergeSort(a, start, end) {
            if (start >= end) {
                return 0;
            }

            const mid = Math.floor((start + end) / 2);

            const ac = mergeSort(a, start, mid);
            const bc = mergeSort(a, mid + 1, end);
            let count = 0;
            let i = start;
            let j = mid + 1;
            //We will do a usual merge sort, but before calling the merge function, 
            while (i <= mid && j <= end) {
                if (a[i] > 2 * a[j]) {
                    count = count + (mid - i + 1);
                    j++;
                } else {
                    i++;
                }
            }

            merge(a, start, mid, end);
            return ac + bc + count;
        }

        function merge(A, start, mid, end) {
            const temp = new Array(end - start + 1);
            let i = start;
            let j = mid + 1;
            let k = 0;

            while (i <= mid && j <= end) {
                if (A[i] < A[j]) {
                    temp[k] = A[i];
                    i++;
                    k++
                } else {
                    temp[k] = A[j];
                    j++;
                    k++
                }
            }

            while (i <= mid) {
                temp[k] = A[i];
                i++;
                k++;
            }
            while (j <= end) {
                temp[k] = A[j];
                j++;
                k++;
            }

            for (i = start; i <= end; i++) {
                A[i] = temp[i - start];
            }
        }

};