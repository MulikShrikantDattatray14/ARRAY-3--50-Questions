Problem Statement: Given an array of N integers. Find the elements that appear more than N/3 times in the array. If no such element exists, return an empty vector.

Pre-requisite: Majority Element(>N/2 times)


Example 1:
Input Format: N = 5, array[] = {1,2,2,3,2}
Result: 2
Explanation: Here we can see that the Count(1) = 1, Count(2) = 3 and Count(3) = 1.Therefore, the count of 2 is greater than N/3 times. Hence, 2 is the answer.

Example 2:
Input Format:  N = 6, array[] = {11,33,33,11,33,11}
Result: 11 33
Explanation: Here we can see that the Count(11) = 3 and Count(33) = 3. Therefore, the count of both 11 and 33 is greater than N/3 times. Hence, 11 and 33 is the answer.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Better Approach : 

Algorithm / Intuition :
Better Approach (Using Hashing): 
Intuition:
Use a better data structure to reduce the number of look-up operations and hence the time complexity. Moreover, we have been calculating the count of the same element again and again – so we have to reduce that also.

CODE : 

function majorityElement(v) {
  const n = v.length; // size of the array
  const ls = []; // list of answers
  // declaring a map:
  const mpp = new Map();
  // least occurrence of the majority element:
  const mini = Math.floor(n / 3) + 1;
  // storing the elements with its occurrence:
  for (let i = 0; i < n; i++) {
    if (mpp.has(v[i])) {
      mpp.set(v[i], mpp.get(v[i]) + 1);
    } else {
      mpp.set(v[i], 1);
    }
    // checking if v[i] is the majority element:
    if (mpp.get(v[i]) == mini) {
      ls.push(v[i]);
    }
    if (ls.length == 2) break;
  }
  return ls;
}

const arr = [11, 33, 33, 11, 33, 11];
const ans = majorityElement(arr);
console.log("The majority elements are: " + ans.join(" "));

Complexity Analysis : 

Time Complexity: O(N*logN), where N = size of the given array.
Reason: We are using a map data structure. Insertion in the map takes logN time. And we are doing it for N elements. So, it results in the first term O(N*logN).
If we use unordered_map instead, the first term will be O(N) for the best and average case and for the worst case, it will be O(N2).

Space Complexity: O(N) as we are using a map data structure. We are also using a list that stores a maximum of 2 elements. That space used is so small that it can be considered constant.

////////////////////////////////////////////////////////////////////////////////////////////////////////////

Optimal Approach :-

Algorithm / Intuition
Optimal Approach (Extended Boyer Moore’s Voting Algorithm): 

Edge Case: Why we are adding extra checks like el2 != v[i] and el1 != v[i] in the first if statements? 
we are checking if the current element is already included in our elements, and if it is, we will not again include it in another variable.

Complexity Analysis :
Time Complexity: O(N) + O(N), where N = size of the given array.
Reason: The first O(N) is to calculate the counts and find the expected majority elements. The second one is to check if the calculated elements are the majority ones or not.

Space Complexity: O(1) as we are only using a list that stores a maximum of 2 elements. The space used is so small that it can be considered constant.



function majorityElement(v) {
  let n = v.length; // size of the array
  let cnt1 = 0;
  let cnt2 = 0; // counts
  let el1 = -Infinity; // element 1
  let el2 = -Infinity; // element 2
  // applying the Extended Boyer Moore's Voting Algorithm:
  //Edge Case: Why we are adding extra checks like el2 != v[i] and el1 != v[i] in the first if statements? 
  //we are checking if the current element is already included in our elements, and if it is, we will not again include it in another variable.
  for (let i = 0; i < n; i++) {
    if (cnt1 === 0 && el2 !== v[i]) {
      cnt1 = 1;
      el1 = v[i];
    }
    else if (cnt2 === 0 && el1 !== v[i]) {
      cnt2 = 1;
      el2 = v[i];
    }
    else if (v[i] === el1) cnt1++;
    else if (v[i] === el2) cnt2++;
    else {
      cnt1--, cnt2--;
    }
  }
  let ls = []; // list of answers
  // Manually check if the stored elements in
  // el1 and el2 are the majority elements:
  cnt1 = 0, cnt2 = 0;
  for (let i = 0; i < n; i++) {
    if (v[i] === el1) cnt1++;
    if (v[i] === el2) cnt2++;
  }

  let mini = Math.floor(n / 3) + 1;
  if (cnt1 >= mini) ls.push(el1);
  if (cnt2 >= mini) ls.push(el2);

  // Uncomment the following line
  // if it is told to sort the answer array:
  // ls.sort(); // TC --> O(2*log2) ~ O(1);

  return ls;
}

let arr = [11, 33, 33, 11, 33, 11];
let ans = majorityElement(arr);
console.log("The majority elements are: " + ans.join(" "));

==============================================================================================================
// note :- below code also got submitted on leetcode :-

let arr =[3,2,3]
let ans = solve(arr)
console.log(ans)
function solve(A) {
  //  refer take U forward channel - majority-II)

  // when told to do N/2 ---> there will 1 majority element
  //when told to do N/3 ---> there will be 2 majority element ..
  // and so on ...
  //note: extension of the Q4 of the assignment
  let n = A.length;
  let candidate1 = -1;
  let candidate2 = -1;
  let count1 = 0;
  let count2 = 0;
  for (let i = 0; i < A.length; i++) {
    if (A[i] == candidate1) count1++;
    else if (A[i] == candidate2) count2++;
    else if (count1 == 0) {
      candidate1 = A[i];
      count1 = 1;
    } else if (count2 == 0) {
      candidate2 = A[i];
      count2 = 1;
    }

    else {
      count1--;
      count2--;
    }

  }
  //console.log(num1, num2);
  let ans = []
  let finalcount1 = 0;
  let finalcount2 = 0;
  for (let i = 0; i < A.length; i++) {
    if (candidate1 == A[i]) {
      finalcount1++;
      if (finalcount1 > n / 3) {
        ans.push(candidate1);
      }
    }

    if (candidate2 == A[i]) {
      finalcount2++;
      if (finalcount2 > n / 3) {
        ans.push(candidate2);
      }
    }
  }
  
  let set = new Set(ans)
  return (Array.from(set))
  //console.log(num1, num2);

}
