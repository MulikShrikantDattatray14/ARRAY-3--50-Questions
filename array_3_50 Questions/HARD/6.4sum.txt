Problem Statement: 

Given an array of N integers, your task is to find unique quads that add up to give a target value. In short, you need to return an array of all the unique quadruplets [arr[a], arr[b], arr[c], arr[d]] such that their sum is equal to a given target.

Note:
0 <= a, b, c, d < n
a, b, c, and d are distinct.
arr[a] + arr[b] + arr[c] + arr[d] == target


Examples : 

Example 1:
Input Format: arr[] = [1,0,-1,0,-2,2], target = 0
Result: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
Explanation: We have to find unique quadruplets from the array such that the sum of those elements is equal to the target sum given that is 0. The result obtained is such that the sum of the quadruplets yields 0.

Example 2:
Input Format: arr[] = [4,3,3,4,4,2,1,2,1,1], target = 9
Result: [[1,1,3,4],[1,2,2,4],[1,2,3,3]]
Explanation: The sum of all the quadruplets is equal to the target i.e. 9.

/////////////////////////////////////////////////////////////////////////////////////

Brute Force Approach : 

Algorithm / Intuition
Solution:
In the question, it is clearly stated that for each case the picked indices i.e. a, b, c, and d must be distinct. This means [arr[1], arr[1], arr[2], arr[3]] is not valid and also remember [arr[1], arr[0], arr[2], arr[3]] and [arr[0], arr[1], arr[2], arr[3]] will be considered same.


CODE : 

function fourSum(nums, target) {
    const n = nums.length;
    const set = new Set();

    for (let i = 0; i < n; i++) {
        for (let j = i + 1; j < n; j++) {
            for (let k = j + 1; k < n; k++) {
                for (let l = k + 1; l < n; l++) {
                    let sum = nums[i] + nums[j] + nums[k] + nums[l];

                    if (sum === target) {
                        let temp = [nums[i], nums[j], nums[k], nums[l]];
                        temp.sort((a, b) => a - b);
                        set.add(temp.join(','));

                    }
                }
            }
        }
    }

    const ans = Array.from(set).map((item) => item.split(',').map(Number));
    console.log(ans)
}

const nums = [4, 3, 3, 4, 4, 2, 1, 2, 1, 1];
const target = 9;
fourSum(nums, target);


Complexity Analysis : 
Time Complexity: O(N4), where N = size of the array.
Reason: Here, we are mainly using 4 nested loops. But we not considering the time complexity of sorting as we are just sorting 4 elements every time.

Space Complexity: O(2 * no. of the quadruplets) as we are using a set data structure and a list to store the quads.


////////////////////////////////////////////////////////////////////////////////////////////////////////

Better Approach :
Algorithm / Intuition
Better Approach (Using 3 loops and set data structure): 

CODE : 
function fourSum(nums, target) {
  const n = nums.length;
  const resultSet = new Set();

  for (let i = 0; i < n; i++) {
    for (let j = i + 1; j < n; j++) {
      const hashSet = new Set();
      for (let k = j + 1; k < n; k++) {
        let sum = nums[i] + nums[j];
        sum += nums[k];
        const fourth = target - sum;

        if (hashSet.has(fourth)) {
          const temp = [nums[i], nums[j], nums[k], fourth].sort(
            (a, b) => a - b
          );
          resultSet.add(temp.join(","));
        }

        hashSet.add(nums[k]);
      }
    }
  }

  let final = [...resultSet].map((item) => item.split(",").map(Number));
  console.log(final);
}
// output : The quadruplets are: [1 1 3 4 ] [1 2 2 4 ] [1 2 3 3 ]
const nums = [4, 3, 3, 4, 4, 2, 1, 2, 1, 1];
const target = 9;
fourSum(nums, target);


Complexity Analysis :
Time Complexity: O(N3*log(M)), where N = size of the array, M = no. of elements in the set.
Reason: Here, we are mainly using 3 nested loops, and inside the loops there are some operations on the set data structure which take log(M) time complexity.

Space Complexity: O(2 * no. of the quadruplets)+O(N)
Reason: we are using a set data structure and a list to store the quads. This results in the first term. And the second space is taken by the set data structure we are using to store the array elements. At most, the set can contain approximately all the array elements and so the space complexity is O(N).

////////////////////////////////////////////////////////////////////////////////////////////////////////////

Optimal Approach :
Algorithm / Intuition-
Optimal Approach: 
In this approach, we intend to get rid of two things i.e. the HashSet we were using for the look-up operation and the set data structure used to store the unique quadruplets.

Again the solution to this will be similar to the optimal approach of the  3-sum problem. In that approach, we had fixed a pointer i, and the rest 2 pointers were moving. Similarly, here, as we are dealing with quads instead of triplets we will fix 2 pointers i.e. i and j and the rest of the 2 pointers will be moving.

Now, we need to first understand what the HashSet and the set were doing to make our algorithm work without them. So, the set data structure was basically storing the unique quadruplets in sorted order and the HashSet was used to search for the fourth element.

To get the quadruplets in sorted order, we will sort the entire array in the first step and to get the unique quads, we will simply skip the duplicate numbers while moving the pointers.

How to skip duplicate numbers:
As the entire array is sorted, the duplicate numbers will be in consecutive places. So, while moving a pointer, we will check the current element and the adjacent element. Until they become different, we will move the pointer by 1 place. We will follow this process for all 4 pointers. Thus, we can easily skip the duplicate elements while moving the pointers.

Now, we can also remove the HashSet as we have two moving pointers i.e. k and l that will find the appropriate value of nums[k] and nums[l]. So, we do not need the HashSet anymore.

Complexity Analysis :
Let's analyze the time and space complexity of the majorityElement function step by step.

Time Complexity: 
O(n)
Space Complexity: 
O(n)



const nums = [4, 3, 3, 4, 4, 2, 1, 2, 1, 1];
const target = 9;
let ans = fourSum(nums, target);
console.log(ans)

function fourSum(nums, target) {
  const n = nums.length; // size of the array
  const ans = [];
  // sort the given array:
  nums.sort((a, b) => a - b);
  // calculating the quadruplets:
  for (let i = 0; i < n; i++) {
    // avoid the duplicates while moving i:
    if (i !== 0 && nums[i] === nums[i - 1]) continue;
    for (let j = i + 1; j < n; j++) {
      // avoid the duplicates while moving j:
      if (j !== i + 1 && nums[j] === nums[j - 1]) continue;
      let k = j + 1;
      let l = n - 1;
      while (k < l) {
        const sum = nums[i] + nums[j] + nums[k] + nums[l];
        if (sum < target) k++;
        else if (sum > target) l--;
        else {
          ans.push([nums[i], nums[j], nums[k], nums[l]]);
          k++;
          l--;
          // skip the duplicates:
          while (k !== l && nums[k] === nums[k - 1]) k++;
          while (k !== l && nums[l] === nums[l + 1]) l--;
        }
      }
    }
  }
  return (ans);
}
