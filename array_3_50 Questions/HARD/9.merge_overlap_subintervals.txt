//Problem Statement:

 Given an array of intervals, merge all the overlapping intervals and return an array of non-overlapping intervals.

 Example 1: 
Input: intervals=[[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]

Explanation: Since intervals [1,3] and [2,6] are overlapping we can merge them to form [1,6]
 intervals.

============================================================================

//https://www.youtube.com/watch?v=eEvGarwDhl0

function merge(intervals) {
  const n = intervals.length;
  //sort according to first value
  intervals.sort((a, b) => a[0] - b[0]);
  const ans = [];
  let start = 0;
  while (start < n) {
    let i = start;
    let j = start + 1;
    let mergedEnd = intervals[start][1];

    while (j < n && mergedEnd >= intervals[j][0]) {
      mergedEnd = Math.max(mergedEnd, intervals[j][1]);
      i++;
      j++;
    }

    ans.push([intervals[start][0], mergedEnd]);
    start = j;
  }

  return ans;
}

// Example usage:
const inputIntervals = [
  [1, 3],
  [2, 6],[9,10],
  [8, 10],
  [15, 18],
];

const mergedIntervals = merge(inputIntervals);
console.log(mergedIntervals);
