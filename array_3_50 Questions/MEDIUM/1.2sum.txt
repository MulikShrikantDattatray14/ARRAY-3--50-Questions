// Two Sum : Check if a pair with given sum exists in Array
// Problem Statement: Given an array of integers arr[] and an integer target.

// 1st variant: Return YES if there exist two numbers such that their sum is equal to the target. Otherwise, return NO.

// 2nd variant: Return indices of the two numbers such that their sum is equal to the target. Otherwise, we will return {-1, -1}.

// Note: You are not allowed to use the same element twice. Example: If the target is equal to 6 and num[1] = 3, then nums[1] + nums[1] = target is not a solution.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////

Naive Approach(Brute-force approach):

Intuition: For each element of the given array, we will try to search for another element such that its sum is equal to the target. If such two numbers exist, we will return the indices or “YES” accordingly.

 function twoSum(n, arr, target) {
  //Check if a pair with given sum exists in Array
  for (let i = 0; i < n; i++) {
    for (let j = i + 1; j < n; j++) {
      if (arr[i] + arr[j] === target) return "YES";
    }
  }
  return "NO";
}

const n = 5;
const arr = [2, 6, 5, 8, 11];
const target = 14;
const ans = twoSum(n, arr, target);
console.log("This is the answer for variant 1: " + ans);

 Time Complexity: O(N2), where N = size of the array.
 Reason: There are two loops(i.e. nested) each running for approximately N times.

 Space Complexity: O(1) as we are not using any extra space.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Better Approach(using Hashing): -Here instead of using a loop, we will use the HashMap to check if the other element i.e. target-(selected element) exists. Thus we can trim down the time complexity of the problem.

  1. if yes/no is asked :-

function twoSum(n, arr, target) {
  const mpp = new Map();
  for (let i = 0; i < n; i++) {
    const num = arr[i];
    const moreNeeded = target - num;
    if (mpp.has(moreNeeded)) {
      return "YES";
    }

    mpp.set(arr[i], i);
  }
  return "NO";
}

const n = 5;
const arr = [2, 6, 5, 8, 11];
const target = 14;
const ans = twoSum(n, arr, target);
console.log("This is the answer for variant 1: " + ans);

2.  return indices of the two numbers such that they add up to target.

        function twoSum1(n, arr, target) {
        const mpp = new Map();
        for (let i = 0; i < n; i++) {
            const num = arr[i];
            const moreNeeded = target - num;
            if (mpp.has(moreNeeded)) {
                return [mpp.get(moreNeeded),i]
            }
            mpp.set(arr[i], i);
        }
        return "NO";
        }
       const arr = nums
       const n = arr.length

    const ans = twoSum1(n, arr, target);
    return ans;

Time Complexity: O(N), where N = size of the array.
 Reason: The loop runs N times in the worst case and searching in a hashmap takes O(1) generally. So the time complexity is O(N).

 Note: In the worst case(which rarely happens), the unordered_map takes O(N) to find an element. In that case, the time complexity will be O(N2). If we use map instead of unordered_map, the time complexity will be O(N* logN) as the map data structure takes logN time to find an element.

 Space Complexity: O(N) as we use the map data structure.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////

Optimized Approach(using two-pointer): 

function twoSum(n, arr, target) {
    arr.sort((a, b) => a - b);
    let left = 0, right = n - 1;
    
    while (left < right) {
        const sum = arr[left] + arr[right];
        
        if (sum === target) {
            return "YES";
        } else if (sum < target) {
            left++;
        } else {
            right--;
        }
    }
    
    return "NO";
}

const n = 5;
const arr = [2, 6, 5, 8, 11];
const target = 14;
const ans = twoSum(n, arr, target);
console.log("This is the answer for variant 1: " + ans);


Time Complexity: O(N) + O(N*logN), where N = size of the array.
Reason: The loop will run at most N times. And sorting the array will take N*logN time complexity.

Space Complexity: O(1) as we are not using any extra space.