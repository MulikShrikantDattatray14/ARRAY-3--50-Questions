Problem Statement:

 Given an array consisting of only 0s, 1s, and 2s. Write a program to in-place sort the array without using inbuilt sort functions. ( Expected: Single pass-O(N) and constant space)

 1.Brute Force Approach : 

  Simply sorting the array would arrange the elements in increasing order.

  Complexity Analysis:
Time Complexity: O(N*logN)

Space Complexity: O(1)

=======================================================================================

Better Approach :-

Keeping count of values-Intuition: Since in this case there are only 3 distinct values in the array so it’s easy to maintain the count of all, Like the count of 0, 1, and 2. This can be followed by overwriting the array based on the frequency(count) of the values.


function sortArray(arr, n) {
    let cnt0 = 0, cnt1 = 0, cnt2 = 0;
    for (let i = 0; i < n; i++) {
        if (arr[i] === 0) cnt0++;
        else if (arr[i] === 1) cnt1++;
        else cnt2++;
    }
    // Replace the places in the original array:
    for (let i = 0; i < cnt0; i++) arr[i] = 0; // replacing 0's

    for (let i = cnt0; i < cnt0 + cnt1; i++) arr[i] = 1; // replacing 1's

    for (let i = cnt0 + cnt1; i < n; i++) arr[i] = 2; // replacing 2's
}
let n = 6;
let arr = [0, 2, 1, 2, 0, 1];
sortArray(arr, n);

console.log("After sorting:");
for (let i = 0; i < n; i++) {
    console.log(arr[i] + " ");
}


Complexity Analysis :
Time Complexity: O(N) + O(N), where N = size of the array. First O(N) for counting the number of 0’s, 1’s, 2’s, and second O(N) for placing them correctly in the original array.

Space Complexity: O(1) as we are not using any extra space.

================================================================================================================================================================================================================================


Optimal Approach- Dutch National flag algorithm:-

This algorithm contains 3 pointers i.e. low, mid, and high, and 3 main rules.  The rules are the following:

arr[0….low-1] contains 0. [Extreme left part]
arr[low….mid-1] contains 1.
arr[mid..high] - unsorted.
arr[high+1….n-1] contains 2. [Extreme right part], n = size of the array.

function sortArray(arr, n) {
    let low = 0, mid = 0, high = n - 1; // 3 pointers

    while (mid <= high) {
        if (arr[mid] === 0) {//arr[0….low-1] contains 0.
            // swapping arr[low] and arr[mid]
            let temp = arr[low];
            arr[low] = arr[mid];
            arr[mid] = temp;
            // move ahead
            low++;
            mid++;
        } else if (arr[mid] === 1) {//arr[low….mid-1] contains 1.
            mid++;
        } else {//arr[high+1….n-1] contains 2.
            // swapping arr[mid] and arr[high]

            let temp = arr[mid];
            arr[mid] = arr[high];
            arr[high] = temp;

            high--;
        }
    }
}

let n = 6;
let arr = [0, 2, 1, 2, 0, 1];
sortArray(arr, n);

console.log("After sorting:");
for (let i = 0; i < n; i++) {
    console.log(arr[i] + " ");
}
