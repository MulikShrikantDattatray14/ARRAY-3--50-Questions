You are given an array of prices where prices[i] is the price of a given stock on an ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

=====================================================================================
Brute Force Approach : Intuition: We can simply use 2 loops and track every transaction and maintain a variable maxPro to contain the max value among all transactions

Complexity Analysis:
Time complexity: O(n^2)

Space Complexity: O(1)

CODE : 


let arr = [7, 1, 5, 3, 6, 4];
let maxProfit1 = maxProfit(arr);
console.log("Max profit is: " + maxProfit1);


//logic :-

//consider every ith index as the minimum and search  the other element with gives  maximum difference with it.

function maxProfit(arr) {
    let maxPro = 0;
    for (let i = 0; i < arr.length; i++) {
        //buying
        for (let j = i + 1; j < arr.length; j++) {
            //selling
            if (arr[j] > arr[i]) {
                // selling > buying --> start selling
                console.log(arr[j] - arr[i]); // profits
                maxPro = Math.max(arr[j] - arr[i], maxPro);
            }
        }
    }
    return maxPro;
}


///////////////////////////////////////////////////////////////////////////////////////

Optimal Approach : Intuition: We will linearly travel the array. We can maintain a minimum from the start of the array and compare it with every element of the array, if it is greater than the minimum then take the difference and maintain it in max, otherwise update the minimum.

Complexity Analysis :
Time complexity: O(n)
Space Complexity: O(1)

CODE : 

const arr = [7, 1, 5, 3, 6, 4];
const { buyIndex, sellIndex, maxPro } = maxProfit(arr);
console.log("Buy at index:", buyIndex);
console.log("Sell at index:", sellIndex);
console.log("Max profit is:", maxPro);

function maxProfit(arr) {
    let maxPro = 0;
    let minPrice = Number.MAX_VALUE;
    let buyIndex = 0;
    let sellIndex = 0;
    for (let i = 0; i < arr.length; i++) {
        if (arr[i] < minPrice) {// try finding the minimum buying point
            minPrice = arr[i];
            buyIndex = i;
        } else if (arr[i] - minPrice > maxPro) {// using that minimum buying point, get the maximum difference
            maxPro = arr[i] - minPrice;
            sellIndex = i;
        }
    }
    return { buyIndex, sellIndex, maxPro };
}
