Problem Statement:

There’s an array ‘A’ of size ‘N’ with an equal number of positive and negative elements. Without altering the relative order of positive and negative elements, you must return an array of alternately positive and negative values.

Note: Start the array with positive elements.

Brute Force Method : In this simple approach, since the number of positive and negative elements are the same, we put positives into an array called “pos” and negatives into an array called “neg”.


// Define a function to rearrange an array of integers by sign.
function RearrangebySign(A, n) {
    // Define 2 arrays, one for storing positive 
    // and other for negative elements of the array.
    let pos = [];
    let neg = [];

    // Segregate the array into positives and negatives.
    for (let i = 0; i < n; i++) {

        if (A[i] > 0) {
            pos.push(A[i]);
        } else {
            neg.push(A[i]);
        }
    }

    // Positives on even indices, negatives on odd.
    for (let i = 0; i < n / 2; i++) {
        A[2 * i] = pos[i];
        A[2 * i + 1] = neg[i];
    }

    return A;
}

// Define an array and call the RearrangebySign function.
let A = [1, 2, -4, -5];
let n = A.length;

let ans = RearrangebySign(A, n);

// Print the result.
console.log(ans.join(" "));


Time Complexity: O(N+N/2) { O(N) for traversing the array once for segregating positives and negatives and another O(N/2) for adding those elements alternatively to the array, where N = size of the array A}.

Space Complexity:  O(N/2 + N/2) = O(N) { N/2 space required for each of the positive and negative element arrays, where N = size of the array A}.


======================================================================================

Optimal Method : In this optimal approach, we will try to solve the problem in a single pass and try to arrange the array elements in the correct order in that pass only.

// Define a function to rearrange an array of integers by sign.


function RearrangebySign(A) {
    let n = A.length;
    // Define an array for storing the answer separately.
    let ans = new Array(n).fill(0);
    // Positive elements start from 0 and negative from 1.
    let posIndex = 0, negIndex = 1;
    for (let i = 0; i < n; i++) {
        // Fill negative elements in odd indices and increment by 2.
        if (A[i] < 0) {
            ans[negIndex] = A[i];
            negIndex += 2;
        }
        // Fill positive elements in even indices and increment by 2.
        else {
            ans[posIndex] = A[i];
            posIndex += 2;
        }
    }

    return ans;
}

// Define an array and call the RearrangebySign function.
let A = [1, 2, -4, -5];

let ans = RearrangebySign(A);

// Print the result.
console.log(ans.join(" "));

//Time Complexity: O(N) { O(N) for traversing the array once and substituting positives and negatives simultaneously using pointers, where N = size of the array A}.

Space Complexity:  O(N) { Extra Space used to store the rearranged elements separately in an array, where N = size of array A}.